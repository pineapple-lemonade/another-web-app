plugins {
    id 'groovy'
    id 'java'
    id 'org.springframework.boot' version '2.6.3'
    id 'org.liquibase.gradle' version '2.0.4'
    id 'jacoco'
}

group 'ru.itis.ruzavin'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web:2.6.3'
    compileOnly 'org.projectlombok:lombok:1.18.22'
    implementation 'javax.xml.bind:jaxb-api:2.3.1'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'
    implementation "org.springframework.boot:spring-boot-starter-data-jpa:2.6.3"
    implementation "org.springframework.boot:spring-boot-starter-validation:2.6.3"
    implementation 'org.postgresql:postgresql:42.3.3'
    implementation "org.springframework.boot:spring-boot-starter-security:2.6.3"
    implementation "org.springframework.boot:spring-boot-starter-thymeleaf:2.6.3"
    implementation "org.springframework.boot:spring-boot-starter-mail:2.6.3"
    implementation "org.springframework.boot:spring-boot-starter-aop:2.6.3"
    implementation 'javax.mail:javax.mail-api:1.6.2'

    implementation 'org.springdoc:springdoc-openapi-ui:1.6.7'

    implementation 'org.liquibase:liquibase-core:4.9.0'
    liquibaseRuntime('org.liquibase:liquibase-core:4.9.0')
    liquibaseRuntime('org.postgresql:postgresql:42.3.3')

    testImplementation "org.springframework.boot:spring-boot-starter-test:2.6.3"
    testImplementation "com.h2database:h2:1.4.200"

    implementation 'org.codehaus.groovy:groovy-all:3.0.8'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:4.13'
    testImplementation 'org.springframework.security:spring-security-test:5.6.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:4.13'
}

def props = new Properties()
file("src/main/resources/liquibase.properties").withInputStream {props.load(it)}

liquibase {
    activities {
        main {
            changeLogFile props.getProperty("changeLogFile")
            url props.getProperty("url")
            username props.getProperty("username")
            password props.getProperty("password")
            driver props.getProperty("driver")
        }
    }
}

test {
    useJUnit()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    'ru/itis/ruzavin/dto',
                    'ru/itis/ruzavin/models',
                    'ru/itis/ruzavin/security',
                    'ru/itis/ruzavin/config',
                    'ru/itis/ruzavin/helpers',
            ])
        }))
    }
}